from openai import OpenAI
import requests
from flask import Flask, request, jsonify
from bs4 import BeautifulSoup

app = Flask(__name__)

OPENAI_API_KEY = "HERE ADD YOUR KEY"  # Replace with your actual OpenAI API key

client = OpenAI(
    api_key=OPENAI_API_KEY,
)


def get_openai_non_compliant_results(policy_text: str, webpage_text: str) -> str:
    """
    Use OpenAI GPT to generate non-compliant results between the policy text and the webpage text.

    Parameters:
    - policy_text (str): The text of the compliance policy.
    - webpage_text (str): The text of the webpage content.

    Returns:
    str: Non-compliant results generated by OpenAI GPT.
    """
    # Create a conversation with a system message and user messages
    conversation = [
        {"role": "system", "content": "You are a compliance-checking assistant."},
        {"role": "user",
         "content": f"Check the compliance between the policy text and the webpage text. Please Mention non-compliant results on website"},
        {"role": "assistant", "content": f"{policy_text}\n\n{webpage_text}"}
    ]

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=conversation,
    )

    non_compliant_results = response.choices[0].message.content
    return non_compliant_results


def fetch_and_process_text(url: str) -> str:
    """
    Fetch and process text content from a given URL by removing HTML tags.

    Parameters:
    - url (str): The URL to fetch text content from.

    Returns:
    str: Processed text content with HTML tags removed.
    """
    try:
        response = requests.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        # Remove HTML tags and get the text
        text = ' '.join(soup.stripped_strings)
        return text
    except Exception as e:
        return str(e)


@app.route('/check_compliance', methods=['POST'])
def check_compliance():
    """
    API endpoint to check compliance between a policy and a webpage.

    Expects a JSON payload with 'policy_url' and 'webpage_url'.
    Returns a JSON response with 'non_compliant_result' or 'error'.
    """
    try:
        data = request.get_json()
        policy_url = data.get('policy_url')
        webpage_url = data.get('webpage_url')

        # Fetch and process the compliance policy text from the provided URL
        policy_text = fetch_and_process_text(policy_url)

        # Fetch and process the webpage text from the provided URL
        webpage_text = fetch_and_process_text(webpage_url)

        # Use OpenAI GPT for summarization
        non_compliant_result = get_openai_non_compliant_results(policy_text, webpage_text)
        return jsonify({'non_compliant_result': non_compliant_result})

    except Exception as e:
        return jsonify({'error': str(e)})


if __name__ == '__main__':
    app.run(debug=True)
